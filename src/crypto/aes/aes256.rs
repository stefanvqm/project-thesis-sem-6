/* Author: Stefan Goetz, 2023
Warranty Disclaimer: the software is provided "as is" without any warranties or conditions.
Implementation according to https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.197-upd1.pdf
*/

#![allow(dead_code)]
#![allow(unused_variables)]

const SBOX: [u8; 256] = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
];

const SBOX_INV: [u8; 256] = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
];

#[derive(Clone, Copy)]
pub enum Blocksize {
    B128 = 10,
    B192 = 12,
    B256 = 14,
}

pub struct AES {
    pub blocksize: Blocksize,
    pub state: [u8; 16],
    pub key: [[u8; 4]; 60],
}

impl AES {
    pub fn new(key: &[u8], blocksize: Blocksize) -> Self {
        
        let expected_key_length_in_bytes = match blocksize {
            Blocksize::B128 => {
                128/8
            },
            Blocksize::B192 => {
                192/8
            },
            Blocksize::B256 => {
                256/8
            },
        };

        if key.len() != expected_key_length_in_bytes {
            panic!("Key-length wrong!");
        }
        
        Self {
            blocksize: blocksize,
            state: [0; 16],
            key: AES::key_expansion(key, blocksize),
        }
    }

    pub fn cipher(&mut self, input: [u8; 16]) -> [u8; 16]{
        self.state = input;

        let nr: usize = self.blocksize as usize;

        self.add_round_key(0);

        for i in 1..nr {
            self.sub_bytes();
            self.shift_rows();
            self.mix_columns();
            self.add_round_key(i);
        }

        self.sub_bytes();
        self.shift_rows();
        self.add_round_key(nr);

        let output: [u8; 16] = self.state;
        self.state = [0; 16];
        output
    }

    pub fn inv_cipher(&mut self, input: [u8; 16]) -> [u8; 16] {
        self.state = input;

        let nr: usize = self.blocksize as usize;

        self.add_round_key(nr);

        for i in (1..nr).rev() {
            self.inv_sub_bytes();
            self.inv_shift_rows();
            self.add_round_key(i);
            self.inv_mix_columns();
        }

        self.inv_sub_bytes();
        self.inv_shift_rows();
        self.add_round_key(0);

        let output: [u8; 16] = self.state;
        self.state = [0; 16];
        output
    }

    fn sub_bytes(&mut self) {
        for i in 0..16 {
            // 0101 0011 >> 4 = 0000 0101 |0011
            let x: u8 = self.state[i] >> 4;
            // 0101 0011 & 0x0F = 0101 0011 & 0000 1111
            let y: u8 = self.state[i] & 0x0F;

            self.state[i] = SBOX[((x * 16) + y) as usize];
        }
    }

    fn inv_sub_bytes(&mut self) {
        for i in 0..16 {
            // 0101 0011 >> 4 = 0000 0101 |0011
            let x: u8 = self.state[i] >> 4; // 5 == 0101
            // 0101 0011 & 0x0F = 0101 0011 & 0000 1111
            let y: u8 = self.state[i] & 0x0F; // 3 == 0011

            self.state[i] = SBOX_INV[((x * 16) + y) as usize];
        }
    }

    fn shift_rows(&mut self) {
        let mut hold: u8 = self.state[1];
        self.state[1] = self.state[5];
        self.state[5] = self.state[9];
        self.state[9] = self.state[13];
        self.state[13] = hold;

        hold = self.state[2];
        self.state[2] = self.state[10];
        self.state[10] = hold;
        hold = self.state[6];
        self.state[6] = self.state[14];
        self.state[14] = hold;

        hold = self.state[15];
        self.state[15] = self.state[11];
        self.state[11] = self.state[7];
        self.state[7] = self.state[3];
        self.state[03] = hold;
    }

    fn inv_shift_rows(&mut self) {
        let mut hold: u8 = self.state[13];
        self.state[13] = self.state[9];
        self.state[9] = self.state[5];
        self.state[5] = self.state[1];
        self.state[1] = hold;

        hold = self.state[2];
        self.state[2] = self.state[10];
        self.state[10] = hold;
        hold = self.state[6];
        self.state[6] = self.state[14];
        self.state[14] = hold;
 
        hold = self.state[3];
        self.state[3] = self.state[7];
        self.state[7] = self.state[11];
        self.state[11] = self.state[15];
        self.state[15] = hold;
    }

    fn mix_columns(&mut self) {
        self._logic_of_mix_columns(false);
    }

    fn inv_mix_columns(&mut self) {
        self._logic_of_mix_columns(true);
    }

    fn _logic_of_mix_columns(&mut self, inverse: bool) {
        for col in 0..4 {
            let mut input_word: [u8; 4] = [0; 4];

            let a: [u8; 4] = if inverse {
                [0xE, 0x9, 0xd, 0xB]
            } else {
                [0x2, 0x1, 0x1, 0x3]
            };

            for row in 0..4 {
                input_word[row] = self.state[(col * 4) + row];
            }

            for row in 0..4 {
                let mut output_word: u8 = 0;

                for k in 0..4 {
                    output_word ^= AES::mult(a[(4 - k + row) % 4], input_word[k]);
                }
                self.state[(col * 4) + row] = output_word;
            }
        }
    }

    fn add_round_key(&mut self, round: usize) {
        for i in 0..4 {
            for j in 0..4 {
                self.state[(i * 4) + j] ^= self.key[(round * 4) + i][j];
            }
        }
    }
    
    /* above: object dependant | below: object independant */
    
    fn mult(mut x: u8, y: u8) -> u8 {
        fn xtime(x: u8) -> u8 {
            (x<<1) ^ (((x>>7) & 1) * 0x1b)
        }

        let mut c: u8 = 0;
        let mut d: u8 = y;

        for i in 0..8 {
            if x % 2 == 1 {
                c ^= d;
            }
            x /= 2;
            d = xtime(d);
        }

        c
    }

    fn key_expansion(key: &[u8], blocksize: Blocksize) -> [[u8; 4]; 60] {
        // number of rounds
        let nr: usize = blocksize as usize;
        // key length
        let nk: usize = blocksize as usize - 6;

        let rcon: [u8; 10] = [0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

        let mut key_schedule: [[u8; 4]; 60] = [[0; 4]; 60];

        for i in 0..(nk) {
            for j in 0..(4) {
                key_schedule[i][j] = key[(i*4) + j];
            }
        }

        let mut temp: [u8; 4];

        for i in nk..=(4 * nr + 3) {
            temp = key_schedule[i - 1];

            if (i % nk) == 0 {
                AES::rot_word(&mut temp);
                AES::sub_word(&mut temp);
                temp[0] ^= rcon[i/nk - 1];
            } else if nk > 6 && (i % nk == 4) {
                AES::sub_word(&mut temp);
            }
            for j in 0..4 {
                key_schedule[i][j] = key_schedule[i - nk][j] ^ temp[j];
            }
        }

        key_schedule
    }

    fn rot_word(word: &mut [u8; 4]) {
        let hold: u8 = word[0];
        word[0] = word[1];
        word[1] = word[2];
        word[2] = word[3];
        word[3] = hold;
    }

    fn sub_word(word: &mut [u8; 4]) {
        for i in 0..4 {
            let x: u8 = word[i] >> 4;
            let y: u8 = word[i] & 0x0F;

            word[i] = SBOX[((x * 16) + y) as usize];
        }
    }
}


#[cfg(test)]
mod tests {
    use super::{AES, Blocksize};
    
    #[test]
    fn basic_tests() {
        fn test_galois_mult() {
            let a: u8 = 0x57; 
            let b: u8 = 0x13; 
            let expected: u8 = 0xfe;
        
            let res: u8 = AES::mult(a, b);
        
            assert_eq!(res, expected);
        }
    
        fn test_sub_bytes() {
            let mut aes: AES = AES { 
                blocksize: Blocksize::B128, 
                state: [0x19, 0x3d, 0xe3, 0xbe, 0xa0, 0xf4, 0xe2, 0x2b, 0x9a, 0xc6, 0x8d, 0x2a, 0xe9, 0xf8, 0x48, 0x08], 
                key: [[0; 4]; 60],
            };
    
            AES::sub_bytes(&mut aes);
    
            let expected: [u8; 16] = [0xd4, 0x27, 0x11, 0xae, 0xe0, 0xbf, 0x98, 0xf1, 0xb8, 0xb4, 0x5d, 0xe5, 0x1e, 0x41, 0x52, 0x30];
    
            assert_eq!(aes.state, expected);
        }
    
        fn test_inv_sub_bytes() {
            let mut aes: AES = AES { 
                blocksize: Blocksize::B128, 
                state: [0xd4, 0x27, 0x11, 0xae, 0xe0, 0xbf, 0x98, 0xf1, 0xb8, 0xb4, 0x5d, 0xe5, 0x1e, 0x41, 0x52, 0x30], 
                key: [[0; 4]; 60],
            };
    
            AES::inv_sub_bytes(&mut aes);
            
            let expected: [u8; 16] = [0x19, 0x3d, 0xe3, 0xbe, 0xa0, 0xf4, 0xe2, 0x2b, 0x9a, 0xc6, 0x8d, 0x2a, 0xe9, 0xf8, 0x48, 0x08];
    
            assert_eq!(aes.state, expected);
        }
    
        fn test_mix_columns() {
            let mut aes: AES = AES { 
                blocksize: Blocksize::B128, 
                state: [0xd4, 0xbf, 0x5d, 0x30, 0xe0, 0xb4, 0x52, 0xae, 0xb8, 0x41, 0x11, 0xf1, 0x1e, 0x27, 0x98, 0xe5], 
                key: [[0; 4]; 60],
            };
    
            AES::mix_columns(&mut aes);
    
            let expected: [u8; 16] = [0x04, 0x66, 0x81, 0xe5, 0xe0, 0xcb, 0x19, 0x9a, 0x48, 0xf8, 0xd3, 0x7a, 0x28, 0x06, 0x26, 0x4c];
    
            assert_eq!(aes.state, expected);
        }
    
        fn test_inv_mix_columns() {
            let mut aes: AES = AES { 
                blocksize: Blocksize::B128, 
                state: [0x04, 0x66, 0x81, 0xe5, 0xe0, 0xcb, 0x19, 0x9a, 0x48, 0xf8, 0xd3, 0x7a, 0x28, 0x06, 0x26, 0x4c], 
                key: [[0; 4]; 60], 
            };
    
            AES::inv_mix_columns(&mut aes);
            
            let expected: [u8; 16] = [0xd4, 0xbf, 0x5d, 0x30, 0xe0, 0xb4, 0x52, 0xae, 0xb8, 0x41, 0x11, 0xf1, 0x1e, 0x27, 0x98, 0xe5];
            
            assert_eq!(aes.state, expected);
        }
    
        fn test_128_key_expansion() {
            let test_key: [u8; 16] = [
                0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
            ];
    
            let aes: AES = AES::new(&test_key, Blocksize::B128);
    
            println!("{:X?}", aes.key);
        }
    
        fn test_192_key_expansion() {
            let test_key: [u8; 24] = [
                0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 
                0x80, 0x90, 0x79, 0xe5, 0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b
            ];
    
            let aes: AES = AES::new(&test_key, Blocksize::B192);
    
            println!("{:X?}", aes.key);
        }
    
        fn test_267_key_expansion() {
            let test_key: [u8; 32] = [
                0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 
                0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81, 
                0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 
                0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4
            ];
    
            let aes: AES = AES::new(&test_key, Blocksize::B256);
    
            println!("{:X?}", aes.key);
        }    
    }

    #[test]
    fn chiper_test() {
        let test_key: [u8; 16] = [
            0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
        ];

        let input: [u8; 16] = [0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34];

        let mut aes: AES = AES::new(&test_key, Blocksize::B128);

        let output = aes.cipher(input);

        let expected_output: [u8; 16] = [0x39, 0x25, 0x84, 0x1d, 0x02, 0xdc, 0x09, 0xfb, 0xdc, 0x11, 0x85, 0x97, 0x19, 0x6a, 0x0b, 0x32];

        println!("output: {:X?}", output);
        println!("expected_output: {:X?}", expected_output);

        assert_eq!(expected_output, output);
    }

    #[test]
    fn inv_chiper_test() {
        let test_key: [u8; 16] = [
            0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
        ];

        let input: [u8; 16] = [0x39, 0x25, 0x84, 0x1d, 0x02, 0xdc, 0x09, 0xfb, 0xdc, 0x11, 0x85, 0x97, 0x19, 0x6a, 0x0b, 0x32];

        let mut aes: AES = AES::new(&test_key, Blocksize::B128);

        let output: [u8; 16] = aes.inv_cipher(input);
        
        let expected_output: [u8; 16] = [0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34];

        println!("output: {:X?}", output);
        println!("expected_output: {:X?}", expected_output);

        assert_eq!(expected_output, output);
    }

}

