/* Author: Stefan Goetz, 2023
Warranty Disclaimer: the software is provided "as is" without any warranties or conditions.
*/

#![allow(dead_code)]
#![allow(unused_variables)]

use super::Curve;
use super::{pack25519, scalarmult};

use crate::utils::rng;

pub struct ECDH {
    curve: Curve,
    pub pub_key: [u8; 32],
    pub sec_key: [u8; 32],
}

impl ECDH {
    pub fn new() -> Self {
        Self { 
            curve: Curve::montgomery(), 
            pub_key: [0; 32], 
            sec_key: [0; 32],
        }
    }

    pub fn gen_key_pair(&mut self) -> () {
        let mut d: [u8; 32] = [0; 32]; 
        rng::fill_array(&mut d);

        /* According to following article: https://cr.yp.to/ecdh.html#use,
        you have to operate on the first and last byte of the privat random
        to create a valid key and to strengthen the key pair */
        d[0] &= 248;
        d[31] &= 127;
        d[31] |= 64;

        self.sec_key = d;

        self.pub_key = scalarmult(&pack25519(&mut self.curve.g.x), &d);
    }

    pub fn symmetric_key(&self, public: &[u8; 32]) -> [u8; 32] {
        scalarmult(&public, &self.sec_key)
    }
}

#[cfg(test)]
mod tests {
    use super::ECDH;
    use super::scalarmult;

    #[test] 
    fn own_keys() {
        let mut ecdh_1: ECDH = ECDH::new();
        ecdh_1.gen_key_pair();

        let mut ecdh_2: ECDH = ECDH::new();
        ecdh_2.gen_key_pair();

        let key1: [u8; 32] = ecdh_1.symmetric_key(&ecdh_2.pub_key);
        let key2: [u8; 32] = ecdh_2.symmetric_key(&ecdh_1.pub_key);

        assert_eq!(key1, key2);
    }

    #[test] 
    fn foreign_keys() {
        fn public_privat_key_test(public: [u8; 32], private: [u8; 32], expected_output: [u8; 32]) {
            let key: [u8; 32] = scalarmult(&public, &private);

            assert_eq!(key, expected_output);
        }

        // Test-Vectors from: https://datatracker.ietf.org/doc/html/rfc7748#section-5.2
        let alice_private_key: [u8; 32] = [0x77, 0x07, 0x6d, 0x0a, 0x73, 0x18, 0xa5, 0x7d, 0x3c, 0x16, 0xc1, 0x72, 0x51, 0xb2, 0x66, 0x45, 0xdf, 0x4c, 0x2f, 0x87, 0xeb, 0xc0, 0x99, 0x2a, 0xb1, 0x77, 0xfb, 0xa5, 0x1d, 0xb9, 0x2c, 0x2a];
        let alice_public_key: [u8; 32] = [0x85, 0x20, 0xf0, 0x09, 0x89, 0x30, 0xa7, 0x54, 0x74, 0x8b, 0x7d, 0xdc, 0xb4, 0x3e, 0xf7, 0x5a, 0x0d, 0xbf, 0x3a, 0x0d, 0x26, 0x38, 0x1a, 0xf4, 0xeb, 0xa4, 0xa9, 0x8e, 0xaa, 0x9b, 0x4e, 0x6a];
        let bob_private_key: [u8; 32] = [0x5d, 0xab, 0x08, 0x7e, 0x62, 0x4a, 0x8a, 0x4b, 0x79, 0xe1, 0x7f, 0x8b, 0x83, 0x80, 0x0e, 0xe6, 0x6f, 0x3b, 0xb1, 0x29, 0x26, 0x18, 0xb6, 0xfd, 0x1c, 0x2f, 0x8b, 0x27, 0xff, 0x88, 0xe0, 0xeb];
        let bob_public_key: [u8; 32] = [0xde, 0x9e, 0xdb, 0x7d, 0x7b, 0x7d, 0xc1, 0xb4, 0xd3, 0x5b, 0x61, 0xc2, 0xec, 0xe4, 0x35, 0x37, 0x3f, 0x83, 0x43, 0xc8, 0x5b, 0x78, 0x67, 0x4d, 0xad, 0xfc, 0x7e, 0x14, 0x6f, 0x88, 0x2b, 0x4f];
        let shared_key: [u8; 32] = [0x4a, 0x5d, 0x9d, 0x5b, 0xa4, 0xce, 0x2d, 0xe1, 0x72, 0x8e, 0x3b, 0xf4, 0x80, 0x35, 0x0f, 0x25, 0xe0, 0x7e, 0x21, 0xc9, 0x47, 0xd1, 0x9e, 0x33, 0x76, 0xf0, 0x9b, 0x3c, 0x1e, 0x16, 0x17, 0x42];

        public_privat_key_test(alice_public_key, bob_private_key, shared_key);
        public_privat_key_test(bob_public_key, alice_private_key, shared_key);
    }

    #[test]
    fn own_and_foreign_keys() {
        // Alice key-pair from following: https://datatracker.ietf.org/doc/html/rfc7748#section-5.2
        let alice_private_key: [u8; 32] = [0x77, 0x07, 0x6d, 0x0a, 0x73, 0x18, 0xa5, 0x7d, 0x3c, 0x16, 0xc1, 0x72, 0x51, 0xb2, 0x66, 0x45, 0xdf, 0x4c, 0x2f, 0x87, 0xeb, 0xc0, 0x99, 0x2a, 0xb1, 0x77, 0xfb, 0xa5, 0x1d, 0xb9, 0x2c, 0x2a];
        let alice_public_key: [u8; 32] = [0x85, 0x20, 0xf0, 0x09, 0x89, 0x30, 0xa7, 0x54, 0x74, 0x8b, 0x7d, 0xdc, 0xb4, 0x3e, 0xf7, 0x5a, 0x0d, 0xbf, 0x3a, 0x0d, 0x26, 0x38, 0x1a, 0xf4, 0xeb, 0xa4, 0xa9, 0x8e, 0xaa, 0x9b, 0x4e, 0x6a];
        
        // Implementation's key-pair
        let mut ecdh = ECDH::new();
        ecdh.gen_key_pair();

        // Alice's calculation
        let key1 = scalarmult(&ecdh.pub_key, &alice_private_key);
        // Implementation's calculation
        let key2 = ecdh.symmetric_key(&alice_public_key);

        assert_eq!(key1, key2);
    }
}